关于R的一切
Android中 res目录下的资源都会经过编译、链接获得一个identifier（id值）
id值 32位int  PPTTNNNN
pp 资源所属包类型 0x7f代表APK包资源 0x01 代表系统包资源（来自Android.jar) 
TT 代表资源类型
      0x02：drawable
      0x03：layout
      0x04：values
      0x05：xml
      0x06：raw
      0x07：color
      0x08：menu
通过APKTools  可以在resource.arsc里面查找真正的资源
AAR
Module
Application

假设我们有项目结构
   -app
     -lib1
       -lib2
         -androidx.recyclerview:recyclerview:1.1.0
最终会生成那些R.java文件？
通过APKTools 看一下dex文件，总共有这些R.java文件
com.example.app.R.java
com.example.lib1.R.java
com.example.lib2.R.java
androidx.recyclerview.R.java
包名和AndroidManifest.xml里面声明的包名相同。

拆解recyclerview-1.0.0.aar
  AndroidManifest.xml
  annotations.zip
  classes.jar
  proguard.txt
  public.txt
  R.txt
  res目录
  values目录
再看一下classes.jar 里面并没有R.java
结论1： AAR的R.java并不会打包到classes.jar中，所以最终APK里面的aar.R.java是在APK打包时生成的而不是AAR中带进来的。
总结：首先我们明确一点，所有R都是在生成APK的时候由AAPT完成。 
  module/aar中临时生成的R.java只是make compiler happy，实际是compileOnly的角色
  在生成apk的时候，aapt会根据app里面的资源，生成真正的R.java文件（app/module/aar），运行的时候代码就会获取到aapt生成的id
  
  
  
  R文件的生成
  编译的中间产物中，R有以下几种形式
     R.java (compileOnly)
     R.txt 此project 所有资源列表，并生成了id，最后会根据这个值生成R.java
     R-def.txt 记录了此project的本地资源（res下，不包含依赖）
     package-aware-r.txt（记录了此project的所有资源，没有生成id）
 
 当一个Module生成R.java的时候，首先会拿到所有依赖的R.txt  比如lib1 依赖lib2，lib2 依赖recyclerview-1.0.0.aar，那么lib1会拿到两个R.txt。
    lib2的R.txt已经生成好了
    AAR的R.txt是从AAR中解压出来的
module拿到所有依赖的R.txt 后，会根据当前module的本地资源，生成package-aware-r.txt

  com.example.lib1
     layout activit_in_lib2
     string string_from_lib1
     string string_from_lib2
第一行package name，从AndroidManifest.xml中取的。 下面几行代表这个module中所有的资源，包括自己和依赖的别人的。 AGP会根据package-aware-r.txt生成R.txt
   int layout activity_in_lib2 0x7f0e0001
   int string string_from_lib1 0x7f140002
   int string string_from_lib2 0x7f140003
AGP分配了一个 临时的id

最后会根据这个R.txt 生成一个 compileOnly的R.txt

最终在APK生成的时候，通过AAPT生成R.java
 com.example.app.R.java
 com.example.lib1.R.java
 com.example.lib2.R.java
 androidx.recyclerview.R.java
