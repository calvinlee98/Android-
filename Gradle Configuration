Gradle 的依赖管理是基于Configuration的  比如
dependencies{
  implementation 'com.taobao.android:liveroom-universal-android:3.10.0.7241047" 
}
implementation 其实就是一个configuration
官方文档对Configuration的介绍是
A configuration represetns a group of artifacts and their dependencies.  Every dependency declared for a gradle project applies to a specific scope. For example some dependencies 
should be used for compiling source code wheras other only need to be avaliable at runtime. Gradle represents the scope of a dependency with the help of a Configuration.
大概意思就是gradle 项目的依赖是有范围的（scope） 有些依赖需要在编译的时候被使用，有些依赖只在runtime阶段被使用。 这个范围也就是scope
configuration 大方向上来讲有两个角度，一个是依赖的容器，也就是管理dependencies  另一方面是artifacts的容器，管理artifacts

Configuration是有继承关系的
A configuration can extend other configurations to form an inheritance hierarchy. Child configurations inherit the whole set of dependencies declared for any of its superconfigurations.
翻译一下 子Configuration继承了父Configuration的所有依赖

Resolvable and consumable configurations
Configuration 其实有三个角色
1. to declare dependencies（声明依赖）
2. as a consumer, to resolve a set of dependencies to files （将依赖解析为FileCollection，作为消费者）
3. as a producer, to expose artifacts and their dependencies for consumption by other projects  (被生产者使用，公开其管理的artifacts和dependencies）

canBeResolved flag?
A configuration that can be resolved is a configuration for which we can compute a dependency graph, because it contains all the necessary information for resolution to happen/
一个canBeResolved的configuration 可以被解析成一个依赖图 dependency graph.  对canBeResolved的configuration，我们的目的是compute a dependency graph, resolve the components in the graph, and eventually
get artifacts.  如果一个configuration 不能被resolve，那么它的角色只是声明依赖。 这有点像abstract class（canBeResolved = false） 和 concrete class （canBeResolved = true） 

canBeConsumed flag？
举个例子，我们现在有个library project （lib） 它是一个java library
configurations {
   someConfiguration
}
dependencies{
   someConfiguration project(':lib')
}
configurations {
   compileClasspath.extendsFrom(someConfiguration)
   runtimeClasspath.extendsFrom(someConfiguration)
}
someConfiguration 是一个依赖的桶
compileClasspath 和 runtimeClasspath是可以被解析的Configuration 
在lib角度（producer）   我们用configurations来声明哪些是可以被consumed的   举个例子，lib library 会暴露API/ runtime  如果我们需要依赖lib 编译，那么我们需要lib的API。 这个时候lib 需要暴露
一个 apiElements 的configuration 让consumer来查找它的API  
  Configuration Role                  canBeResolved        canBeConsumed
   Bucket of dependencies               false                  false
    Resolve for certain usage            true                  false
   Exposed to consumers                  false                 true

当gradle 要 resolve 一个module的时候，它会尝试找metadata 文件或者默认的artifact（jar）  如果这两个都没有，那么resolve就会失败。
但是有些时候我们并不是需要下载一个jar ，假设有以下几种情况
  1. repository 下的这个module只有一个非标准的artifact（比如.zip, .aar, .apk)
  2. metadata 声明了多种artifact 比如上传一个apk的时候，artifact包括（dependencies.txt,  app.apk,  R.txt用于id固定， classes.jar) 
  3. 在下载这个依赖的时候，我只想下载一个特定的artifact
repositories {
    ivy {
          url 'https://ajax.googleapis.com/ajax/libs'
    }
     patternLayout {
          artifact '[organization]/[revision]/[module].[ext]'
     }
     metadataSources {
          artifact()
     }   
}
configurations {
    js
}
dependencies {
      js 'jquery:jquery:3.2.1@js'
}


gradle 支持的metadata formats包括
1. Grale Module Metadata files （.module)
2. Pom files （常见的）   .pom 文件
3. Ivy files
