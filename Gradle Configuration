Gradle 的依赖管理是基于Configuration的  比如
dependencies{
  implementation 'com.taobao.android:liveroom-universal-android:3.10.0.7241047" 
}
implementation 其实就是一个configuration
官方文档对Configuration的介绍是
A configuration represetns a group of artifacts and their dependencies.  Every dependency declared for a gradle project applies to a specific scope. For example some dependencies 
should be used for compiling source code wheras other only need to be avaliable at runtime. Gradle represents the scope of a dependency with the help of a Configuration.
大概意思就是gradle 项目的依赖是有范围的（scope） 有些依赖需要在编译的时候被使用，有些依赖只在runtime阶段被使用。 这个范围也就是scope

Configuration是有继承关系的
A configuration can extend other configurations to form an inheritance hierarchy. Child configurations inherit the whole set of dependencies declared for any of its superconfigurations.
翻译一下 子Configuration继承了父Configuration的所有依赖

Resolvable and consumable configurations
Configuration 其实有三个角色
1. to declare dependencies（声明依赖）
2. as a consumer, to resolve a set of dependencies to files （将依赖解析为FileCollection，作为消费者）
3. as a producer, to expose artifacts and their dependencies for consumption by other projects  (被生产者使用，公开其管理的artifacts和dependencies）

canBeResolved flag?
A configuration that can be resolved is a configuration for which we can compute a dependency graph, because it contains all the necessary information for resolution to happen/
一个canBeResolved的configuration 可以被解析成一个依赖图 dependency graph.  对canBeResolved的configuration，我们的目的是compute a dependency graph, resolve the components in the graph, and eventually
get artifacts.  如果一个configuration 不能被resolve，那么它的角色只是声明依赖。 这有点像abstract class（canBeResolved = false） 和 concrete class （canBeResolved = true） 

canBeConsumed flag？
举个例子，我们现在有个library project （lib） 它是一个java library
configurations {
   someConfiguration
}
dependencies{
   someConfiguration project(':lib')
}
configurations {
   compileClasspath.extendsFrom(someConfiguration)
   runtimeClasspath.extendsFrom(someConfiguration)
}
someConfiguration 是一个依赖的桶
compileClasspath 和 runtimeClasspath是可以被解析的Configuration 
在lib角度（producer）   我们用configurations来声明哪些是可以被consumed的   举个例子，lib library 会暴露API/ runtime  如果我们需要依赖lib 编译，那么我们需要lib的API。 这个时候lib 需要暴露
一个 apiElements 的configuration 让consumer来查找它的API  
  Configuration Role                  canBeResolved        canBeConsumed
   Bucket of dependencies               false                  false
    Resolve for certain usage            true                  false
   Exposed to consumers                  false                 true
