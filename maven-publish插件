maven-publish 插件


The Maven Publish Plugin provides the ability to publish build artifacts to an Apache Maven repository.
A module published to a Maven repository can be consumed by Maven, Gradle (see Declaring Dependencies) and other tools that understand the Maven repository format.
You can learn about the fundamentals of publishing in Publishing Overview.
使用maven-publish 插件 可以将产物发布到maven 仓库， 让maven 项目和gradle 项目可以使用 

发布制品到Maven 仓库
plugins {
   maven-publish
}
添加一个extension  publishin: PublishingExtension
a container of named publications and a container of named repositories MavenPublication MavenArtifactRepository

添加的tasks
generatePomFileForPubNamePublication
  创建一个POM file,路径名 build/publications/$pubName/pom-default.xml
  POM文件:Project Object Model,  包含了这个Project的所有内容，包括GAV， Project本身的依赖等等。 一般maven项目是 pom.xml  也可以是.pom 文件，具体可以看 build/publications/$pubName/pom-default.xml
publishPubNamePublicationToRepoNameRepository
  将pubName 的publication 发布到仓库 RepoName
publishToMavenLocal
  将所有的publications 发布到 local maven cache ，包括metadata（POM file）
publish
  将所有的publications 发布到所有的repositories，不会发布到local maven cache
  

Publications
一个Publication有四个要素
1. components
2. custom artifact
3. metadata
4. POM file 的其他内容

publishing {
   publications{ 
       maven(MavenPublication){
             //// 实现类MavenPublication
            version '1.0.0'
             task sourceJar(type: Jar) {
                classifier = 'source'
                version = version
                try {
                    if (components.hasWithName("java")) {
                        from sourceSets.main.allJava
                    } else {
                        from android.sourceSets.main.java.srcDirs
                    }
                } catch (Throwable e) {

                }
            }
            //// artifact 自定义发布产物 支持文件 artifact 'xxx.aar'  支持归档Task 
            artifact sourceJar
            /// 编辑pom-default.xml 文件 也就是最终的Project的Pom文件 一般我们可以增加一些项目的依赖
             pom.withXml {
                    asNode().dependencies.'*'.each {
                        if (it.scope.text() == 'runtime') {
                            if (project.configurations.providedCompile.allDependencies.find { dep -> dep.name == it.artifactId.text() }) {
                                it.scope*.value = 'provided'
                            } else if (project.configurations.compile.allDependencies.find { dep -> dep.name == it.artifactId.text() }) {
                                it.scope*.value = 'compile'
                            }
                        }
                    }
                }
       }  
   }
}



