maven-publish 插件
发布制品到Maven 仓库
plugins {
   maven-publish
}
添加一个extension  publishin: PublishingExtension
a container of named publications and a container of named repositories MavenPublication MavenArtifactRepository

添加tasks
generatePomFileForPubNamePublication
  创建一个POM file,路径名 build/publications/$pubName/pom-default.xml
publishPubNamePublicationToRepoNameRepository
  将pubName 的publication 发布到仓库 RepoName
publishToMavenLocal
  将所有的publications 发布到 local maven cache ，包括metadata（POM file）
publish
  将所有的publications 发布到所有的repositories，不会发布到local maven cache
  

Publications
一个Publication有四个要素
1. component
2. custom artifact
3. metadata
4. POM file 的其他内容

publishing {
   publications{ 
       groupId = 'org.gradle.sample'
       artifactId = 'library'
       version = '1.1'
       
       /// 发布一个jar
       from components.java  
   }
}

高版本gradle 没有generatePomFileForPubNamePublication 问题
用公司的maven-publish脚本的时候，发现有个问题，gradle版本升级之后，没有成功发布aar。
发布aar的逻辑在下面
project.afterEvaluate {

    if (project.plugins.hasPlugin("com.taobao.android.library") || project.plugins.hasPlugin("com.android.library")) {
        project.getRootProject().aarMap.add(project.name)
    }

    ext.isApplication = (project.plugins.hasPlugin("com.android.application")||project.plugins.hasPlugin("com.taobao.android.application") )

    tasks.whenTaskAdded { task ->
        if (task.name.startsWith("generatePomFileForMavenPublication")) {
            task.doFirst {
                project.publishing.publications.maven(MavenPublication) {
                    if (!components.hasWithName("java") && !isApplication) {

                        File f = file("${project.buildDir}/outputs/awb/${project.name}-release.awb");
                        /// 发布release aar
                        if (!f.exists()) {
                            f = file("${project.buildDir}/outputs/aar/${project.name}-release.aar");
                        }
                        if (!f.exists()) {
                            f = file("${project.buildDir}/outputs/awb/${project.name}-debug.awb");
                        }
                        发布debug aar
                        if (!f.exists()) {
                            f = file("${project.buildDir}/outputs/aar/${project.name}-debug.aar");
                        }

                        artifact f.getPath()
                    }
                }
            }
        }

        if ( isApplication && !publishApk ) {
            if (task.name.startsWith("publish")) {
                task.setEnabled(false)
            }
        }
    }
}

它的方式是注册了一个tasks.whenTaskAdded，当generatePomFileForMavenPublication 被添加到 tasks graph 的时候，操作 publications.maven，
手动调用artifact aar，将aar作为发布的制品。
打印一下依赖树
+++ publishMavenPublicationToMavenRepository
sourceJar
generatePomFileForMavenPublication
---
+++ publishMavenPublicationToMavenLocalRepository
sourceJar
generatePomFileForMavenPublication
---

可以看到 publishMavenPublicationToMavenRepository 和 publishMavenPublicationToMavenLocalRepository 都dependens on
generatePomFileForMavenPublication 这个任务 


