aapt2 是一个可执行程序，在AS 在Android Studio 的 build-tools中，目录 /build-tools/version/aapt2
aapt2的的二级命令
  compile 编译资源
  link 链接资源

aapt2的编译资源，是指将资源编译成一个二进制文件(.flat文件)  这个二进制文件是一个中间文件  目录 intermediates/res/merge/debug/

aapt2 compile path-to-input-files [options] -o output-directory/

flat 文件是资源文件的容器，文件包含两部分 文件头  资源项
文件头
size in bytes              Field         Description
  4                        magic          0x54504141
  4                        version        AAPT2 容器版本
  4                        entry_count      资源项个数（一个flat文件可以有多个资源项）

资源项
 size in bytes            field          Description
  4                       entry_type      0x00000000(RES_TABLE)  0x00000001(RES_FILE)
  8                       entry_length     资源长度
  entry_length            data              资源

资源项有两种 RES_TABLE或RES_FILE  


RES_TABLE的protobuf 格式
// Top level message representing a resource table.
message ResourceTable {
    // 字符串池
    StringPool source_pool = 1;
    // 用于生成资源id
    repeated Package package = 2;
    // 资源叠加层相关
    repeated Overlayable overlayable = 3;
    // 工具版本
    repeated ToolFingerprint tool_fingerprint = 4;
}

RES_FILE 资源项格式
  Size in bytes           Field        Description
     4                   header_size     header长度
     8                   data_size        data长度
   header_size           header          表示protobuf序列化的CompileFile结构
    x                    header_padding   0-3个填充字节，用于data 32 对齐
    data_size            data             PNG,二进制XML或protobuf序列化的XmlNode结构
    y                    data_padding      0-3个填充字节，用于data 32 对齐
header中保存了文件名、文件路径、文件配置和文件类型等信息 
data 是文件内容  
这样 一个资源项有了文件的外部相关信息，又包含了文件的原始内容。

总结来说 aapt2 的编译  是对原始资源的操作， 其输入可以是files，dir或者是Archive file。  输出也可以是dir或者Archive文件 
处理的结果是中间文件 也就是.flat 文件，  .flat 文件不但有资源本身，也有资源的信息，并且一个.flat 文件可以有多个资源项
.flat 文件的拼接方式
drawable_xxxx.png.flat  也就是 {dir}_{xxx}.{资源名}.flat  /// 除values目录下的内容
values-.arsc.flat        ///values目录下的内容

整体过一下源码

int CompileCommand::Action(const std::vector<std::string>& args) {
    //省略部分代码....
    std::unique_ptr<io::IFileCollection> file_collection;
    //加载输入资源，简化逻辑，下面会省略掉校验的代码
    if (options_.res_dir && options_.res_zip) {
        context.GetDiagnostics()->Error(DiagMessage() << "only one of --dir and --zip can be specified");
        return 1;
    } else if (options_.res_dir) {
        //加载目录下的资源文件...
        file_collection = io::FileCollection::Create(options_.res_dir.value(), &err);
        //...
    }else if (options_.res_zip) {
        //加载压缩包格式的资源文件...
        file_collection = io::ZipFileCollection::Create(options_.res_zip.value(), &err);
        //...
    } else {
        //也是FileCollection，先定义collection，通过循环依次添加输入文件，再拷贝到file_collection
        file_collection = std::move(collection);
    }
    std::unique_ptr<IArchiveWriter> archive_writer;
    //产物输出文件类型
    file::FileType output_file_type = file::GetFileType(options_.output_path);
    if (output_file_type == file::FileType::kDirectory) {
        //输出到文件目录
        archive_writer = CreateDirectoryArchiveWriter(context.GetDiagnostics(), options_.output_path);
    } else {
        //输出到压缩包
        archive_writer = CreateZipFileArchiveWriter(context.GetDiagnostics(), options_.output_path);
    }
    if (!archive_writer) {
        return 1;
    }
    return Compile(&context, file_collection.get(), archive_writer.get(), options_);
}



 int Compile(IAaptContext* context, io::IFileCollection* inputs, IArchiveWriter* output_writer, CompileOptions& options) {
    TRACE_CALL();
    bool error = false;
    // 编译输入的资源文件
    auto file_iterator  = inputs->Iterator();
    while (file_iterator->HasNext()) {
        // 省略部分代码（文件校验相关...）
        std::string err_str;
        ResourcePathData path_data;
        // 获取path全名，用于后续文件类型判断
        if (auto maybe_path_data = ExtractResourcePathData(path, inputs->GetDirSeparator(), &err_str)) {
            path_data = maybe_path_data.value();
        } else {
            context->GetDiagnostics()->Error(DiagMessage(file->GetSource()) << err_str);
            error = true;
            continue;
        }
 
        // 根据文件类型，选择编译方法，这里的 CompileFile 是函数指针，指向一个编译方法。
        // 使用使用设置为CompileFile方法
        auto compile_func = &CompileFile;
        // 如果是values目录下的xml资源，使用 CompileTable 方法编译，并修改扩展名为arsc
        if (path_data.resource_dir == "values" && path_data.extension == "xml") {
            compile_func = &CompileTable;
            // We use a different extension (not necessary anymore, but avoids altering the existing // build system logic).
            path_data.extension = "arsc";
        } else if (const ResourceType* type = ParseResourceType(path_data.resource_dir)) {
            // 解析资源类型，如果kRaw类型，执行默认的编译方法，否则执行如下代码。
            if (*type != ResourceType::kRaw) {
                //xml路径或者文件扩展为.xml
                if (*type == ResourceType::kXml || path_data.extension == "xml") {
                    // xml类，使用CompileXml方法编译
                    compile_func = &CompileXml;
                } else if ((!options.no_png_crunch && path_data.extension == "png") || path_data.extension == "9.png") { //如果后缀名是.png并且开启png优化或者是点9图类型
                    // png类，使用CompilePng方法编译
                    compile_func = &CompilePng;
                }
            }
        } else {
            // 不合法的类型，输出错误信息，继续循环
            context->GetDiagnostics()->Error(DiagMessage() << "invalid file path '" << path_data.source << "'");
            error = true;
            continue;
        } 
        // 校验文件名中是否有.
        if (compile_func != &CompileFile && !options.legacy_mode && std::count(path_data.name.begin(), path_data.name.end(), '.') != 0) {
            error = true;
            context->GetDiagnostics()->Error(DiagMessage(file->GetSource()) << "file name cannot contain '.' other than for" << " specifying the extension");
            continue;
        }
        // 生成产物文件名，这个方法会生成完成的flat文件名，例如上文demo中的 drawable-hdpi_ic_launcher.png.flat
        const std::string out_path = BuildIntermediateContainerFilename(path_data);
        // 执行编译方法
        if (!compile_func(context, options, path_data, file, output_writer, out_path)) {
            context->GetDiagnostics()->Error(DiagMessage(file->GetSource()) << "file failed to compile"); error = true;
        }
    }
    return error ? 1 : 0;
}

Compile 使用了函数指针 
auto& compile_func = &CompileFile
CompileFile 是默认的编译方法  总共有四个方法
CompileFile
CompileXml      xml文件的二进制化
CompilePNG     png 压缩
CompileTable  values目录下xml资源 扩展名 .arsc.flat

/// 默认的CompileFile 函数
static bool CompileFile(IAaptContext* context, const CompileOptions& options, const ResourcePathData& path_data, io::IFile* file, IArchiveWriter* writer, const std::string& output_path) {
    TRACE_CALL();
    if (context->IsVerbose()) {
        context->GetDiagnostics()->Note(DiagMessage(path_data.source) << "compiling file");
    }
    // 定义ResourceFile 对象，保存config，source等信息
    ResourceFile res_file;
    res_file.name = ResourceName({}, *ParseResourceType(path_data.resource_dir), path_data.name);
    res_file.config = path_data.config;
    res_file.source = path_data.source;
    res_file.type = ResourceFile::Type::kUnknown; //这类型下可能有xml，png或者其他的什么，统一设置类型为unknow。
    // 原始文件数据
    auto data = file->OpenAsData();
    if (!data) {
        context->GetDiagnostics()->Error(DiagMessage(path_data.source) << "failed to open file ");
        return false;
    }
    return WriteHeaderAndDataToWriter(output_path, res_file, data.get(), writer, context->GetDiagnostics());
}

WriteHeaderAndDataToWriter的流程可以简单归纳为：

IArchiveWriter.StartEntry，打开文件，做好写入准备；
ContainerWriter.AddResFileEntry，写入数据；
IArchiveWriter.FinishEntry，关闭文件，释放内存。


static bool WriteHeaderAndDataToWriter(const StringPiece& output_path, const ResourceFile& file, io::KnownSizeInputStream* in, IArchiveWriter* writer, IDiagnostics* diag) {
    // 打开文件
    if (!writer->StartEntry(output_path, 0)) {
        diag->Error(DiagMessage(output_path) << "failed to open file");
        return false;
    }
    // Make sure CopyingOutputStreamAdaptor is deleted before we call writer->FinishEntry().
    {
        // 对write做一层包装，用来写protobuf数据
        CopyingOutputStreamAdaptor copying_adaptor(writer);
        ContainerWriter container_writer(©ing_adaptor, 1u);
        //把file按照protobuf格式序列化，序列化后的文件是 pb_compiled_file，这里的file文件是ResourceFile文件，包含了原始文件的路径，配置等信息
        pb::internal::CompiledFile pb_compiled_file;
        SerializeCompiledFileToPb(file, &pb_compiled_file);
        // 再把pb_compiled_file 和 in（原始文件） 写入到产物文件中
        if (!container_writer.AddResFileEntry(pb_compiled_file, in)) {
            diag->Error(DiagMessage(output_path) << "failed to write entry data");
            return false;
        }
    }
    // 退出写状态
    if (!writer->FinishEntry()) {
        diag->Error(DiagMessage(output_path) << "failed to finish writing data");
        return false;
    }
    return true;
}

/// fopen 打开文件
bool StartEntry(const StringPiece& path, uint32_t flags) override {
    if (file_) {
        return false;
    }
    std::string full_path = dir_;
    file::AppendPath(&full_path, path);
    file::mkdirs(file::GetStem(full_path).to_string());
    //打开文件
    file_ = {::android::base::utf8::fopen(full_path.c_str(), "wb"), fclose};
    if (!file_) {
        error_ = SystemErrorCodeToString(errno);
        return false;
    }
    return true;
}

/// 释放内存
bool StartEntry(const StringPiece& path, uint32_t flags) override {
    if (file_) {
        return false;
    }
    std::string full_path = dir_;
    file::AppendPath(&full_path, path);
    file::mkdirs(file::GetStem(full_path).to_string());
    //打开文件
    file_ = {::android::base::utf8::fopen(full_path.c_str(), "wb"), fclose};
    if (!file_) {
        error_ = SystemErrorCodeToString(errno);
        return false;
    }
    return true;
}


// 在类的构造方法中，写入文件头的信息
ContainerWriter::ContainerWriter(ZeroCopyOutputStream* out, size_t entry_count)
  : out_(out), total_entry_count_(entry_count), current_entry_count_(0u) {
    CodedOutputStream coded_out(out_);
    // 魔法数据，kContainerFormatMagic = 0x54504141
    coded_out.WriteLittleEndian32(kContainerFormatMagic);  
    // 版本号，kContainerFormatVersion = 1u
    coded_out.WriteLittleEndian32(kContainerFormatVersion);
    // 容器中包含的条目数 total_entry_count_是在ContainerReader构造时赋值，值由外部传入 资源项个数
    coded_out.WriteLittleEndian32(static_cast<uint32_t>(total_entry_count_));
    if (coded_out.HadError()) {
        error_ = "failed writing container format header";
    }
}

/// .flat 文件添加资源项
// file:protobuf格式的信息文件，in：原始文件
bool ContainerWriter::AddResFileEntry(const pb::internal::CompiledFile& file, io::KnownSizeInputStream* in) {
    // 判断条目数量，大于设定数量就直接报错
    if (current_entry_count_ >= total_entry_count_) {
        error_ = "too many entries being serialized";
        return false;
    }
    // 条目++
    current_entry_count_++;
    constexpr const static int kResFileEntryHeaderSize = 12; 、
    //输出流
    CodedOutputStream coded_out(out_);
    //写入资源类型
    coded_out.WriteLittleEndian32(kResFile);
 
    const ::google::protobuf::uint32
    // ResourceFile 文件长度 ，该部分包含了当前文件的路径，类型，配置等信息
    header_size = file.ByteSize();
    const int header_padding = CalculatePaddingForAlignment(header_size);
    // 原始文件长度
    const ::google::protobuf::uint64 data_size = in->TotalSize();
    const int data_padding = CalculatePaddingForAlignment(data_size);
    // 写入数据长度，计算公式：kResFileEntryHeaderSize（固定12） + ResourceFile文件长度 + header_padding + 原始文件长度 + data_padding
    coded_out.WriteLittleEndian64(kResFileEntryHeaderSize + header_size + header_padding + data_size + data_padding);
 
    // 写入文件头长度
    coded_out.WriteLittleEndian32(header_size);
    // 写入数据长度
    coded_out.WriteLittleEndian64(data_size);
    // 写入“头信息”
    file.SerializeToCodedStream(&coded_out);
    // 对齐
    WritePadding(header_padding, &coded_out);
    // 使用Copy之前需要调用Trim（至于为什么，其实也不太清楚，好在我们学习AAPT2，了解底层API的功能即可。如果有读者知道，希望赐教）
    coded_out.Trim();
    // 异常判断
    if (coded_out.HadError()) {
        error_ = "failed writing to output"; return false;
    } if (!io::Copy(out_, in)) {  //资源数据（源码中也叫payload，可能是png，xml，或者XmlNode）
        if (in->HadError()) {
            std::ostringstream error;
            error << "failed reading from input: " << in->GetError();
            error_ = error.str();
        } else {
            error_ = "failed writing to output";
        }
        return false;
    }
    // 对其
    WritePadding(data_padding, &coded_out);
    if (coded_out.HadError()) {
        error_ = "failed writing to output";
        return false;
    }
    return true;
}

